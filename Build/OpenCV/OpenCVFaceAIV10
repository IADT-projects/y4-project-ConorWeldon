import cv2

# Load the cascades for face, mouth, eyebrows, and cheekbones
face_cascade = cv2.CascadeClassifier(cv2.data.haarcascades +'haarcascade_frontalface_default.xml')
mouth_cascade = cv2.CascadeClassifier(cv2.data.haarcascades +'haarcascade_mouth.xml')
eyebrow_cascade = cv2.CascadeClassifier(cv2.data.haarcascades +'haarcascade_eye.xml')
cheekbone_cascade = cv2.CascadeClassifier(cv2.data.haarcascades +'haarcascade_cheekbone.xml')

# Initialize the video capture
cap = cv2.VideoCapture(0)

while True:
    # Read the frame
    ret, frame = cap.read()

    # Convert to grayscale
    gray = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)

    # Detect faces
    faces = face_cascade.detectMultiScale(gray, 1.3, 5)

    # For each face detected
    for (x,y,w,h) in faces:
        # Draw a rectangle around the face
        cv2.rectangle(frame,(x,y),(x+w,y+h),(255,0,0),2)

        # Get the region of interest for the face
        roi_gray = gray[y:y+h, x:x+w]
        roi_color = frame[y:y+h, x:x+w]

        # Detect mouth
        mouth = mouth_cascade.detectMultiScale(roi_gray, 1.7, 11)

        # Detect eyebrows
        eyebrows = eyebrow_cascade.detectMultiScale(roi_gray, 1.1, 5)

        # Detect cheekbones
        cheekbones = cheekbone_cascade.detectMultiScale(roi_gray, 1.1, 5)

        # Draw rectangles around detected features
        for (ex,ey,ew,eh) in mouth:
            cv2.rectangle(roi_color,(ex,ey),(ex+ew,ey+eh),(0,0,255),2)

        for (ex,ey,ew,eh) in eyebrows:
            cv2.rectangle(roi_color,(ex,ey),(ex+ew,ey+eh),(0,255,0),2)

        for (ex,ey,ew,eh) in cheekbones:
            cv2.rectangle(roi_color,(ex,ey),(ex+ew,ey+eh),(255,255,0),2)

        # Check if all features are present to determine whether the person is smiling
        if len(mouth) > 0 and len(eyebrows) > 0 and len(cheekbones) > 0:
            print("Smiling")
        else:
            print("Not smiling")

    # Display the resulting frame
    cv2.imshow('Smile Detector',frame)

    # Quit the program if 'q' is pressed
    if cv2.waitKey(1) & 0xFF == ord('q'):
        break

# Release the capture and destroy all windows
cap.release()
cv2.destroyAllWindows()
